 def knapSack(self,W, wt, val, n):
        def helper(wt,val,W,n,dp):
            if n==0 or W==0:
                return 0
            if dp[n][W]!=-1:
                return dp[n][W]
            if wt[n-1]<=W:
                dp[n][W]=max(val[n-1]+helper(wt,val,W-wt[n-1],n-1,dp),helper(wt,val,W,n-1,dp))
                return dp[n][W]
            else:
                dp[n][W]=helper(wt,val,W,n-1,dp)
                return dp[n][W]
        dp=[[-1 for j in range(W+1)] for i in range(n+1)]
        return helper(wt,val,W,n,dp)
